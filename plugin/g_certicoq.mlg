(*i camlp4deps: "grammar/grammar.cma" i*)

DECLARE PLUGIN "coq-certicoq.plugin"

{
open Pp
open Certicoq
open Ltac_plugin
open Stdarg
open Pcoq.Prim
open Plugin_utils

}

VERNAC ARGUMENT EXTEND cargs 
| [ "-bypass_qed" ] -> { BYPASS_QED }
| [ "-cps" ] -> { CPS }
| [ "-time" ] -> { TIME }
| [ "-time_anf" ] -> { TIMEANF }
| [ "-O" natural(n) ] -> { OPT(n) }
| [ "-debug" ] -> { DEBUG }
| [ "-args" natural(n) ] -> { ARGS(n) }
| [ "-config" natural(n) ] -> { ANFCONFIG(n) }
(* Zoe: -config  To measure different ANF configurations. Not for user purposes *)
| [ "-build_dir" string(s) ] -> { BUILDDIR(s) }
| [ "-dev" natural(n) ] -> { DEV(n) }
| [ "-ext" string(s) ] -> { EXT(s) }
| [ "-file" string(s) ] -> { FILENAME(s) }
END


VERNAC ARGUMENT EXTEND extract_cnst 
| [ reference(gr) "=>" string(str) ] -> { (extract_constant (Option.get (Constrintern.locate_reference gr)) str, false) }
| [ reference(gr) "=>" string(str) "with" "tinfo" ] -> { (extract_constant (Option.get (Constrintern.locate_reference gr)) str, true) }
END

VERNAC ARGUMENT EXTEND ffiargs
| [ "-prefix" string(s) ] -> { PREFIX(s) }
| [ cargs(c) ] -> { c }
END

VERNAC ARGUMENT EXTEND glueargs
| [ "-cps" ] -> { CPS }
| [ "-debug" ] -> { DEBUG }
| [ "-args" natural(n) ] -> { ARGS(n) }
| [ "-file" string(s) ] -> { FILENAME(s) }
| [ "-build_dir" string(s) ] -> { BUILDDIR(s) }
END

VERNAC ARGUMENT EXTEND cinclude
| [ string(str) ] -> { FromRelativePath str }
| [ string(str) "as" "absolute" ] -> { FromAbsolutePath str }
| [ string(str) "as" "library" ] -> { FromLibrary str }
END

VERNAC COMMAND EXTEND CertiCoq_Register CLASSIFIED AS SIDEFF
| [ "CertiCoq" "Register" "[" extract_cnst_list_sep(l, ",") "]" "Include" "[" cinclude_list_sep(imps, ",") "]" ] -> {
    Certicoq.register l imps
  }
END

VERNAC COMMAND EXTEND CertiCoq_Compile CLASSIFIED AS QUERY
| [ "CertiCoq" "Compile" cargs_list(l) global(gr) ] -> {
    let gr = Nametab.global gr in
    let opts = Certicoq.make_options l [] (get_name gr) in
    Certicoq.compile_only opts gr []
  }
| [ "CertiCoq" "Compile" cargs_list(l) global(gr) "Extract" "Constants" "[" extract_cnst_list_sep(cs, ",") "]" "Include" "[" cinclude_list_sep(imps, ",") "]" ] -> {
    let gr = Nametab.global gr in
    let opts = Certicoq.make_options l cs (get_name gr) in
    Certicoq.compile_only opts gr imps
  }
| [ "CertiCoq" "Run" cargs_list(l) global(gr) "Extract" "Constants" "[" extract_cnst_list_sep(cs, ",") "]" "Include" "[" cinclude_list_sep(imps, ",") "]" ] -> {
  let gr = Nametab.global gr in
  let opts = Certicoq.make_options l cs (get_name gr) in
  Certicoq.compile_C opts gr imps
  }
| [ "CertiCoq" "Run" cargs_list(l) global(gr) ] -> {
  let gr = Nametab.global gr in
  let opts = Certicoq.make_options l [] (get_name gr) in
  Certicoq.compile_C opts gr []
  }
| [ "CertiCoq" "Eval" cargs_list(l) global(gr) "Extract" "Constants" "[" extract_cnst_list_sep(cs, ",") "]" "Include" "[" cinclude_list_sep(imps, ",") "]" ] -> {
  let gr = Nametab.global gr in
  let opts = Certicoq.make_options l cs (get_name gr) in
  let result = Certicoq.compile_shared_C opts gr imps in 
  Feedback.msg_notice Pp.(str" = " ++ Printer.pr_constr_env (Global.env ()) Evd.empty result)
  }
| [ "CertiCoq" "Eval" cargs_list(l) global(gr) ] -> {
  let gr = Nametab.global gr in
  let opts = Certicoq.make_options l [] (get_name gr) in
  let result = Certicoq.compile_shared_C opts gr [] in
  Feedback.msg_notice Pp.(str" = " ++ Printer.pr_constr_env (Global.env ()) Evd.empty result)
  }
| [ "CertiCoq" "Show" "IR" cargs_list(l) global(gr) ] -> {
    let gr = Nametab.global gr in
    let opts = Certicoq.make_options l [] (get_name gr) in
    Certicoq.show_ir opts gr
  }
| [ "CertiCoq" "Show" "IR" cargs_list(l) global(gr) "Extract" "Constants" "[" extract_cnst_list_sep(cs, ",") "]" ] -> {
    let gr = Nametab.global gr in
    let opts = Certicoq.make_options l cs (get_name gr) in
    Certicoq.show_ir opts gr
  }
| [ "CertiCoq" "FFI" ffiargs_list(l) global(gr) ] -> {
    let gr = Nametab.global gr in
    let opts = Certicoq.make_options l [] "" in
    Certicoq.ffi_command opts gr
  }
| [ "CertiCoq" "Generate" "Glue" glueargs_list(l) "[" global_list_sep(grs, ",") "]" ] -> {
    let grs = List.map Nametab.global grs in
    let opts = Certicoq.make_options l [] "" in
    Certicoq.glue_command opts grs
  }
| [ "CertiCoq" "-help" ] -> {
    Feedback.msg_info (str help_msg)
  }
END
